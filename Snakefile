import yaml
import pandas as pd

def select_samples_per_group(verification_table, sample_sheet_dict):
    """
    Selects subset of samples based on verification table.

    Args:
        verification_table: path to verification table to parse sample names from.
        sample_sheet_dict: dict with sample names as key, generated by juno-library.
    
    Returns:
        list of sample names present in both sample_sheet_dict and verification table.
    """
    df = pd.read_csv(verification_table, sep='\t')
    selected_samples = []
    for sample in df['sample']:
        if sample in sample_sheet_dict.keys():
            selected_samples.append(sample)
    return selected_samples

sample_sheet=config["sample_sheet"]
with open(sample_sheet) as f:
    SAMPLES = yaml.safe_load(f)

INPUT = config["input_dir"]
OUT = config["out"]


localrules:
    all,
    verify_accuracy_BVI,
    verify_accuracy_AMR,
    collect_and_rename,
    select_cols_resfinder,
    select_cols_plasmidfinder,
    get_hashes_resfinder,
    get_hashes_plasmidfinder,
    typing_report,
    display_typing_discrepancies,


####################################################
###             BVI verification                 ###
####################################################

BVI_SAMPLES = select_samples_per_group("config/verification_criteria_BVI.tsv", SAMPLES) # has to be implemented in main wrapper

# Create empty list and append.
# If no samples from the input folder are also in the verification table,
# Snakemake will not attempt to make output for this group of samples.
BVI_OUTPUT = []

if len(BVI_SAMPLES) > 0:
    BVI_OUTPUT.append(OUT + "/verification_subreports/verify_accuracy_BVI.tsv")
    BVI_OUTPUT.append(OUT + "/verification_subreports/BVI_assembly_hashes.txt")
    BVI_OUTPUT.append(OUT + "/verification_subreports/BVI_clean_reads_hashes.txt")
    BVI_OUTPUT.append(OUT + "/verification_subreports/BVI_id_species_hashes.txt")
    BVI_OUTPUT.append(OUT + "/verification_subreports/BVI_qc_assembly_hashes.txt")

# Include BVI rules
include: "workflow/rules/BVI/verify_accuracy.smk"

####################################################
###             AMR verification                 ###
####################################################

AMR_SAMPLES = select_samples_per_group("config/verification_criteria_AMR.tsv", SAMPLES) # has to be implemented in main wrapper

# Create empty list and append.
# If no samples from the input folder are also in the verification table,
# Snakemake will not attempt to make output for this group of samples.
AMR_OUTPUT = []

if len(AMR_SAMPLES) > 0:
    AMR_OUTPUT.append(expand(OUT + "/verification_subreports/verify_accuracy_AMR.tsv"))
    AMR_OUTPUT.append(OUT + "/de_novo_assembly_filtered")
    AMR_OUTPUT.append(OUT + "/discrepancies")

# Include AMR rules
include: "workflow/rules/AMR/typing.smk"
include: "workflow/rules/AMR/copy_assemblies.smk"
include: "workflow/rules/AMR/verify_accuracy.smk"

####################################################
###             RVP verification                 ###
####################################################

# RVP_SAMPLES = select_samples_per_group("config/verification_criteria_RVP.tsv", SAMPLES) # has to be implemented in main wrapper

# RVP_OUTPUT = []

# if len(RVP_SAMPLES) > 0:
#     RVP_OUTPUT.append(OUT + "/verification_subreports/verify_qc_RVP.tsv")

# # Include rules
# include: "workflow/rules/RVP/verify_qc.smk"

rule all:
    input:
        BVI_OUTPUT,
        AMR_OUTPUT,
        OUT + "/git_version.txt"

rule get_git_version:
    output:
        OUT + "/git_version.txt"
    params:
        reference_dir = config["reference_dir"],
        config_dir = config["config_dir"],
    shell:
        """
date | tr '\n' '\t' > {output}
git --git-dir {params.reference_dir}/../.git -n 1 --pretty=format:"%H" >> {output}
        """